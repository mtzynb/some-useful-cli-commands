zookeeper-server-start.bat config\zookeeper.properties

kafka-server-start.bat config\server.properties



kafka-topics.bat --create --topic myfirsttopic --bootstrap-server localhost:9092 

--list created topics
kafka-topics.bat --list --bootstrap-server localhost:9092


kafka-topics.bat --describe --topic myfirsttopic --bootstrap-server localhost:9092

kafka-topics.bat --delete --topic myfirsttopic --bootstrap-server localhost:9092

( Bootstrap server is the Kafka server, having port number=909)


//---------------------------------------------------
// ****** Sending data to Kafka Topics ******//

kafka-console-producer.bat

'--bootstrap-server' and a 'topic id' is required to produce a message. It is because a producer must know the id of the topic to which the data is to be written.


kafka-console-producer.bat --topic myfirsttopic --bootstrap-server localhost:9092




************* Producer with Keys ***************

 A 'parse.key' and a 'key.seperator' is required to specify a key for the topic
 
kafka-console-producer --topic myfirsttopic --property parse.key=true --property key.separator=,  --bootstrap-server localhost:9092




************* Changing the Default Values of new topics ***************

Follow the below steps to change the default values for the new topic:

Open 'server.properties' file using Notepad++, or any other text editor.
Edit the value of num.partitions=1 to a new value. Let it be 3. So, whenever such new topics are introduced, the number of PartitionCount and ReplicationFactor will be 3(whatever the user has set).
Save the file.

But, always create topics before.


// ****** Kafka Console Consumer ******//

kafka-console-consumer.bat


The highlighted text represents that a 'bootstrap-server' is required for the consumer to get connected to the Kafka topics. Also, a 'topic_id' is required to know from which topic the consumer will read the messages.



kafka-console-consumer.bat -bootstrap-server localhost:9092 -topic myfirsttopic

/*
In the previous section, three messages were produced to this topic. But, in the above snapshot, 0 messages could be seen. It is because Apache Kafka does not read all the topics. A Kafka consumer will consume only those messages which are produced only when the consumer was in the active state. This can be categorized as a disadvantage of Apache Kafka.

*/

// ****** Reading whole messages ******//

kafka-console-consumer.bat -bootstrap-server localhost:9092 -topic myfirsttopic --from-beginning

/*
For this topic 'myfirst', we had three partitions. So, if a user wishes to see the order, create a topic with a single partition value. It will display whole messages in a sequence.
*/


// ****** Kafka Consumer Group CLI ******//
kafka-consumer-groups.bat

kafka-consumer-groups.bat -bootstrap-server localhost:9092 --list

kafka-consumer-groups.bat -bootstrap-server localhost:9092 --describe --group <group_name>
kafka-consumer-groups.bat -bootstrap-server localhost:9092 --describe --group first_app


kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic <topic_name> --group <group_name>
kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic myfirsttopic --group first_app

/* This command describes whether any active consumer is present, the current offset value, lag value is 0 -indicates that the consumer has read all the data. */




// ****** Consumer with Keys ******//

kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic <topic_name> --from-beginning --property print.key=true --property key.seperator=,


kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic myfirsttopic --from-beginning --property print.key=true --property key.seperator=,


kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic <topic_name> --group <g_name> --from-beginning --property print.key=true --property key.seperator=,

kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic myfirsttopic --group second_group --from-beginning --property print.key=true --property key.seperator=,

//****** Resetting the Offsets ******//

Offsets are committed in Apache Kafka. Therefore, if a user wants to read the messages again, it is required to reset the offsets value. 'Kafka-consumer-groups' command offers an option to reset the offsets. Resetting the offset value means defining the point from where the user wants to read the messages again. It supports only one consumer group at a time, and there should be no active instances for the group.


